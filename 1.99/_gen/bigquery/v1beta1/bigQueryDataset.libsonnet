{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='bigQueryDataset', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of BigQueryDataset', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'bigquery.cnrm.cloud.google.com/v1beta1',
    kind: 'BigQueryDataset',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#access':: d.obj(help='"An array of objects that define dataset access for one or more entities."'),
    access: {
      '#dataset':: d.obj(help='"Grants all resources of particular types in a particular dataset read access to the current dataset."'),
      dataset: {
        '#dataset':: d.obj(help='"The dataset this entry applies to."'),
        dataset: {
          '#withDatasetId':: d.fn(help='"The ID of the dataset containing this table."', args=[d.arg(name='datasetId', type=d.T.string)]),
          withDatasetId(datasetId): { dataset+: { dataset+: { datasetId: datasetId } } },
          '#withProjectId':: d.fn(help='"The ID of the project containing this table."', args=[d.arg(name='projectId', type=d.T.string)]),
          withProjectId(projectId): { dataset+: { dataset+: { projectId: projectId } } },
        },
        '#withTargetTypes':: d.fn(help='"Which resources in the dataset this entry applies to. Currently, only views are supported,\\nbut additional target types may be added in the future. Possible values: VIEWS."', args=[d.arg(name='targetTypes', type=d.T.array)]),
        withTargetTypes(targetTypes): { dataset+: { targetTypes: if std.isArray(v=targetTypes) then targetTypes else [targetTypes] } },
        '#withTargetTypesMixin':: d.fn(help='"Which resources in the dataset this entry applies to. Currently, only views are supported,\\nbut additional target types may be added in the future. Possible values: VIEWS."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetTypes', type=d.T.array)]),
        withTargetTypesMixin(targetTypes): { dataset+: { targetTypes+: if std.isArray(v=targetTypes) then targetTypes else [targetTypes] } },
      },
      '#view':: d.obj(help='"A view from a different dataset to grant access to. Queries\\nexecuted against that view will have read access to tables in\\nthis dataset. The role field is not required when this field is\\nset. If that view is updated by any user, access to the view\\nneeds to be granted again via an update operation."'),
      view: {
        '#withDatasetId':: d.fn(help='"The ID of the dataset containing this table."', args=[d.arg(name='datasetId', type=d.T.string)]),
        withDatasetId(datasetId): { view+: { datasetId: datasetId } },
        '#withProjectId':: d.fn(help='"The ID of the project containing this table."', args=[d.arg(name='projectId', type=d.T.string)]),
        withProjectId(projectId): { view+: { projectId: projectId } },
        '#withTableId':: d.fn(help='"The ID of the table. The ID must contain only letters (a-z,\\nA-Z), numbers (0-9), or underscores (_). The maximum length\\nis 1,024 characters."', args=[d.arg(name='tableId', type=d.T.string)]),
        withTableId(tableId): { view+: { tableId: tableId } },
      },
      '#withDomain':: d.fn(help='"A domain to grant access to. Any users signed in with the\\ndomain specified will be granted the specified access."', args=[d.arg(name='domain', type=d.T.string)]),
      withDomain(domain): { domain: domain },
      '#withGroupByEmail':: d.fn(help='"An email address of a Google Group to grant access to."', args=[d.arg(name='groupByEmail', type=d.T.string)]),
      withGroupByEmail(groupByEmail): { groupByEmail: groupByEmail },
      '#withRole':: d.fn(help='"Describes the rights granted to the user specified by the other\\nmember of the access object. Basic, predefined, and custom roles\\nare supported. Predefined roles that have equivalent basic roles\\nare swapped by the API to their basic counterparts. See\\n[official docs](https://cloud.google.com/bigquery/docs/access-control)."', args=[d.arg(name='role', type=d.T.string)]),
      withRole(role): { role: role },
      '#withSpecialGroup':: d.fn(help="\"A special group to grant access to. Possible values include:\\n\\n\\n* 'projectOwners': Owners of the enclosing project.\\n\\n\\n* 'projectReaders': Readers of the enclosing project.\\n\\n\\n* 'projectWriters': Writers of the enclosing project.\\n\\n\\n* 'allAuthenticatedUsers': All authenticated BigQuery users.\"", args=[d.arg(name='specialGroup', type=d.T.string)]),
      withSpecialGroup(specialGroup): { specialGroup: specialGroup },
      '#withUserByEmail':: d.fn(help='"An email address of a user to grant access to. For example:\\nfred@example.com."', args=[d.arg(name='userByEmail', type=d.T.string)]),
      withUserByEmail(userByEmail): { userByEmail: userByEmail },
    },
    '#defaultEncryptionConfiguration':: d.obj(help='"The default encryption key for all tables in the dataset. Once this property is set,\\nall newly-created partitioned tables in the dataset will have encryption key set to\\nthis value, unless table creation request (or query) overrides the key."'),
    defaultEncryptionConfiguration: {
      '#kmsKeyRef':: d.obj(help='"Describes the Cloud KMS encryption key that will be used to protect destination\\nBigQuery table. The BigQuery Service Account associated with your project requires\\naccess to this encryption key."'),
      kmsKeyRef: {
        '#withExternal':: d.fn(help='"Allowed value: The `selfLink` field of a `KMSCryptoKey` resource."', args=[d.arg(name='external', type=d.T.string)]),
        withExternal(external): { spec+: { defaultEncryptionConfiguration+: { kmsKeyRef+: { external: external } } } },
        '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { defaultEncryptionConfiguration+: { kmsKeyRef+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { defaultEncryptionConfiguration+: { kmsKeyRef+: { namespace: namespace } } } },
      },
    },
    '#projectRef':: d.obj(help='"The project that this resource belongs to."'),
    projectRef: {
      '#withExternal':: d.fn(help='"Allowed value: The `name` field of a `Project` resource."', args=[d.arg(name='external', type=d.T.string)]),
      withExternal(external): { spec+: { projectRef+: { external: external } } },
      '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { projectRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { projectRef+: { namespace: namespace } } },
    },
    '#withAccess':: d.fn(help='"An array of objects that define dataset access for one or more entities."', args=[d.arg(name='access', type=d.T.array)]),
    withAccess(access): { spec+: { access: if std.isArray(v=access) then access else [access] } },
    '#withAccessMixin':: d.fn(help='"An array of objects that define dataset access for one or more entities."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='access', type=d.T.array)]),
    withAccessMixin(access): { spec+: { access+: if std.isArray(v=access) then access else [access] } },
    '#withDefaultPartitionExpirationMs':: d.fn(help="\"The default partition expiration for all partitioned tables in\\nthe dataset, in milliseconds.\\n\\n\\nOnce this property is set, all newly-created partitioned tables in\\nthe dataset will have an 'expirationMs' property in the 'timePartitioning'\\nsettings set to this value, and changing the value will only\\naffect new tables, not existing ones. The storage in a partition will\\nhave an expiration time of its partition time plus this value.\\nSetting this property overrides the use of 'defaultTableExpirationMs'\\nfor partitioned tables: only one of 'defaultTableExpirationMs' and\\n'defaultPartitionExpirationMs' will be used for any new partitioned\\ntable. If you provide an explicit 'timePartitioning.expirationMs' when\\ncreating or updating a partitioned table, that value takes precedence\\nover the default partition expiration time indicated by this property.\"", args=[d.arg(name='defaultPartitionExpirationMs', type=d.T.integer)]),
    withDefaultPartitionExpirationMs(defaultPartitionExpirationMs): { spec+: { defaultPartitionExpirationMs: defaultPartitionExpirationMs } },
    '#withDefaultTableExpirationMs':: d.fn(help="\"The default lifetime of all tables in the dataset, in milliseconds.\\nThe minimum value is 3600000 milliseconds (one hour).\\n\\n\\nOnce this property is set, all newly-created tables in the dataset\\nwill have an 'expirationTime' property set to the creation time plus\\nthe value in this property, and changing the value will only affect\\nnew tables, not existing ones. When the 'expirationTime' for a given\\ntable is reached, that table will be deleted automatically.\\nIf a table's 'expirationTime' is modified or removed before the\\ntable expires, or if you provide an explicit 'expirationTime' when\\ncreating a table, that value takes precedence over the default\\nexpiration time indicated by this property.\"", args=[d.arg(name='defaultTableExpirationMs', type=d.T.integer)]),
    withDefaultTableExpirationMs(defaultTableExpirationMs): { spec+: { defaultTableExpirationMs: defaultTableExpirationMs } },
    '#withDescription':: d.fn(help='"A user-friendly description of the dataset."', args=[d.arg(name='description', type=d.T.string)]),
    withDescription(description): { spec+: { description: description } },
    '#withFriendlyName':: d.fn(help='"A descriptive name for the dataset."', args=[d.arg(name='friendlyName', type=d.T.string)]),
    withFriendlyName(friendlyName): { spec+: { friendlyName: friendlyName } },
    '#withLocation':: d.fn(help="\"Immutable. The geographic location where the dataset should reside.\\nSee [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).\\n\\n\\nThere are two types of locations, regional or multi-regional. A regional\\nlocation is a specific geographic place, such as Tokyo, and a multi-regional\\nlocation is a large geographic area, such as the United States, that\\ncontains at least two geographic places.\\n\\n\\nThe default value is multi-regional location 'US'.\\nChanging this forces a new resource to be created.\"", args=[d.arg(name='location', type=d.T.string)]),
    withLocation(location): { spec+: { location: location } },
    '#withMaxTimeTravelHours':: d.fn(help='"Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days)."', args=[d.arg(name='maxTimeTravelHours', type=d.T.string)]),
    withMaxTimeTravelHours(maxTimeTravelHours): { spec+: { maxTimeTravelHours: maxTimeTravelHours } },
    '#withResourceID':: d.fn(help='"Immutable. Optional. The datasetId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default."', args=[d.arg(name='resourceID', type=d.T.string)]),
    withResourceID(resourceID): { spec+: { resourceID: resourceID } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
